let graph = document.getElementById('plotly-pdf');
let xText = document.getElementById('x-scale-text');
let xScaleSlider = document.getElementById('x-scale-slider');
let pushButton = document.getElementById('push-button');
let flight = document.getElementById('flight');
let pathButton = document.getElementById('path-button');
let startAnimeButton = document.getElementById('start-button');
let skipAnimeButton = document.getElementById('skip-button');
let stopAnimeButton = document.getElementById('stop-anime-button');

let initialPathButtonStatus = true;
let hasSkipped = false;
let hasPushed = false;
let globalXData;
let globalYData;
let xScale;
let blockWidth = 20;
let animeData; //stores data generated by each call instance of the startAnimation() function
let stepWidthData; //stores step width data that is useful in the counting functionality

let Params = {
    frameRate: 150,
    markerSize: 9
};

function setup() {
    let cnv = createCanvas(600, 600);
    /*let x = (windowWidth - width) / 2;
    let y = (windowHeight - height) / 2;
    cnv.position(x, y);*/
    background(0);
    cnv.parent(document.getElementById('canvas'));

    scale(1, -1);
    translate(0, -height);

    let xBlockLength = width/blockWidth;        

    let xArray = [];
    for (let i=0; i<xBlockLength; i++) {
        xArray.push(blockWidth * i);
    };

    let yArray = [];
    for (let i=0; i<xBlockLength;  i++) {
        yArray.push(height/2);
    };

    for (let i=0; i<xArray.length; i++) {
        strokeWeight(4);
        stroke(255);
        if (i !== xArray.length-1) {
            line(xArray[i], yArray[i], xArray[i+1], yArray[i+1]);
        } else {
            line(xArray[i], yArray[i], width, 0);
        }
    };

    window.xArray = xArray;
    window.yArray = yArray;

    //Plotly initiation
    xScale = 1;

    let xData = [];
    for (let i=0; i<=xArray.length; i++) {
        xData.push(i);
    };

    let yData0 = [];
    for (let i=0; i<=yArray.length; i++) {
        if (i !== yArray.length) {
            yData0.push(yArray[i]);
        } else {
            yData0.push(0);
        }
    };

    let area = integration(xScale, yData0);

    yData = yData0.map(function(element) {
        return element/area;
    });

    Plotly.newPlot(graph, {
        data: [{
            mode: 'lines',
            type: 'scatter',
            x: xData,
            y: yData
        }],
        layout: {
            title: 'Probability Density Function of the Flight Step Width',
            xaxis: {title: {text: 'Step Width'}},
            yaxis: {title: {text: 'Probability Density'}}},
        config: {responsive: true}
    });

    Plotly.newPlot(flight, {
        data: [{
            mode: 'lines',
            type: 'scatter',
            name: 'path',
            x: [0],
            y: [0]
        }, {
            mode: 'markers',
            type: 'scatter',
            name: 'pointer',
            x: [0],
            y: [0],
            marker: {size: Params.markerSize}
        }], config: {responsive: true}}, {}, {showSendToCloud:true});

    window.yData0 = yData0;
    xScaleSlider.disabled = true;
}
  
function draw() {
    scale(1, -1);
    translate(0, -height);

    background(0);

    for (let i=0; i<xArray.length; i++) {
        if (i !== xArray.length-1) {
            line(xArray[i], yArray[i], xArray[i+1], yArray[i+1]);
        } else {
            line(xArray[i], yArray[i], width, 0);
        }
    };
};

function mousePressed() {
    for (let i=0; i<xArray.length; i++) {
        if (i !== xArray.length-1) {
            if (mouseX>xArray[i] && mouseX<xArray[i+1]) {
                if (mouseY>=0 && mouseY<=height) {
                    yArray[i] = height - mouseY;
                }
            };
        } else {
            if (mouseX>xArray[i] && mouseX<width) {
                if (mouseY>=0 && mouseY<=height) {
                    yArray[i] = height - mouseY;
                }
            };
        }
    };
};

function mouseDragged() {
    for (let i=0; i<xArray.length; i++) {
        if (i !== xArray.length-1) {
            if (mouseX>xArray[i] && mouseX<xArray[i+1]) {
                if (mouseY>=0 && mouseY<=height) {
                    yArray[i] = height - mouseY;
                }
            };
        } else {
            if (mouseX>xArray[i] && mouseX<width) {
                if (mouseY>=0 && mouseY<=height) {
                    yArray[i] = height - mouseY;
                }
            };
        }
    };
};

function stopButton() {
    xScale = 1;

    let xData = [];
    for (let i=0; i<=xArray.length; i++) {
        xData.push(i);
    };

    let yData0 = [];
    for (let i=0; i<=yArray.length; i++) {
        if (i !== yArray.length) {
            yData0.push(yArray[i]);
        } else {
            yData0.push(0);
        }
    };

    let area = integration(xScale, yData0);

    yData = yData0.map(function(element) {
        return element/area;
    });

    Plotly.react(graph, {
        data: [{
            mode: 'lines',
            type: 'scatter',
            x: xData,
            y: yData
        }],
        layout: {
            title: 'Probability Density Function of the Flight Step Width',
            xaxis: {title: {text: 'Step Width'}},
            yaxis: {title: {text: 'Probability Density'}}}
    });

    xScaleSlider.value = 1;
    xText.innerHTML = 'x scale: 1';

    pushButton.disabled = true;
    xScaleSlider.disabled = false;
    hasPushed = true;

    window.yData0 = yData0;
    noLoop();
}

function startButton() {
    for (let i=0; i<yArray.length; i++) {
        yArray[i] = width/2;
    };

    //Plotly return to original state
    xScale = 1;

    let xData = [];
    for (let i=0; i<=xArray.length; i++) {
        xData.push(i);
    };
    
    let yData0 = [];
    for (let i=0; i<=yArray.length; i++) {
        if (i !== yArray.length) {
            yData0.push(yArray[i]);
        } else {
            yData0.push(0);
        }
    };
    
    let area = integration(xScale, yData0);
    
    yData = yData0.map(function(element) {
        return element/area;
    });
    
    Plotly.react(graph, {
        data: [{
            mode: 'lines',
            type: 'scatter',
            x: xData,
            y: yData
        }],
        layout: {
            title: 'Probability Density Function of the Flight Step Width',
            xaxis: {title: {text: 'Step Width'}},
            yaxis: {title: {text: 'Probability Density'}}}
    });

    Plotly.newPlot(flight, {
        data: [{
            mode: 'lines',
            type: 'scatter',
            name: 'path',
            x: [0],
            y: [0]
        }, {
            mode: 'markers',
            type: 'scatter',
            name: 'pointer',
            x: [0],
            y: [0],
            marker: {size: Params.markerSize}
        }], config: {responsive: true}}, {}, {showSendToCloud:true});

    xScaleSlider.value = 1;
    xText.innerHTML = 'x scale: 1';
    xScaleSlider.disabled = true;
    pushButton.disabled = false;
    hasPushed = false;
    animeData = undefined;
    stepWidthData = undefined;
    initialPathButtonStatus = true;
    pathButton.innerHTML = 'hide path';
    pathButton.style.visibility = 'hidden';
    hasSkipped = false;

    //window.xData = xData;
    window.yData0 = yData0;
    loop();
};

function integration(xScale, yData) {
    let area = 0;
    for (let i=0; i<yData.length-1; i++) {
        areaIncrement = (yData[i] + yData[i+1]) * xScale / 2;
        area = area + areaIncrement;
    };
    return area;
};

xScaleSlider.oninput = function() {
    xText.innerHTML = `x scale: ${xScaleSlider.value}`;

    xScale = this.value;

    let xData = [];
    for (let i=0; i<=xArray.length; i++) {
        xData.push(i*xScale);
    };

    /*let yData0 = [];
    for (let i=0; i<=yArray.length; i++) {
        if (i !== yArray.length) {
            yData0.push(yArray[i]);
        } else {
            yData0.push(0);
        }
    };*/ //this block needs to be deleted as it will reset the yData even when the push button is not supposed to be working.

    let area = integration(xScale, yData0);

    yData = yData0.map(function(element) {
        return element/area;
    });

    Plotly.animate(graph, {
        data: [{
            mode: 'lines',
            type: 'scatter',
            x: xData,
            y: yData
        }],
        layout: {
            title: 'Probability Density Function of the Flight Step Width',
            xaxis: {title: {text: 'Step Width'}},
            yaxis: {title: {text: 'Probability Density'}}}
    }, {
        transition: {
            duration: 0,
            easing: 'linear-in-out'
        }, frame: {duration: 0,
        redraw: false}
    });
}

xScaleSlider.onmouseup = function() {
    xScale = this.value;

    let xData = [];
    for (let i=0; i<=xArray.length; i++) {
        xData.push(i*xScale);
    };

    /*let yData0 = [];
    for (let i=0; i<=yArray.length; i++) {
        if (i !== yArray.length) {
            yData0.push(yArray[i]);
        } else {
            yData0.push(0);
        }
    };*/

    let area = integration(xScale, yData0);

    yData = yData0.map(function(element) {
        return element/area;
    });

    yMax = Math.max(...yData);
    yLimit = yMax * 4/3;

    Plotly.animate(graph, {
        layout: {
            title: 'Probability Density Function of the Flight Step Width',
            xaxis: {range: [0, xData[xData.length-1]]},
            yaxis: {range: [0, yLimit]}
        }
    }, {
        transition: {
            duration: 400,
            easing: 'linear-in-out'
        }, frame: {duration: 500,
        redraw: false}
    });
};

function startAnimation(stepNumber=5000) {
    if (hasPushed === false) {
        alert("You haven't pushed a valid function yet!")
    } else {
        console.time('timer1')
        xScale = xScaleSlider.value;
    
        let xData = [];
        for (let i=0; i<=xArray.length; i++) {
            xData.push(i*xScale);
        };
    
        let area = integration(xScale, yData0);
    
        yData = yData0.map(function(element) {
            return element/area;
        });
    
        let i = 1;
        let info = dataPreparation(xScale, yData, stepNumber);
        let xDataAnime = info[0];
        let yDataAnime = info[1];
        let incrementData = info[4];
    
        Plotly.newPlot(flight, {
            data: [{
                mode: 'lines',
                type: 'scatter',
                name: 'path',
                x: [0],
                y: [0]
            }, {
                mode: 'markers',
                type: 'scatter',
                name: 'pointer',
                x: [0],
                y: [0],
                marker: {size: Params.markerSize}
            }], config: {responsive: true}}, {}, {showSendToCloud:true});
        
        while (i < stepNumber + 1) {
            tracing(i, xDataAnime, yDataAnime);
            i++;
        };
    
        animeData = info.slice(0, 4);
        stepWidthData = incrementData;
        initialPathButtonStatus = true;
        pathButton.innerHTML = 'hide path';
        pathButton.style.visibility = 'hidden';
        hasSkipped = false;
        xScaleSlider.disabled = true;
        pushButton.disabled = true;
    
        globalXData = xData;
        globalYData = yData;
    
        console.timeEnd('timer1');
    }
};

function tracing (i, xDataAnime, yDataAnime) {
    let newXData = xDataAnime.slice(0, i);
    let newYData = yDataAnime.slice(0, i);

    xRange = Math.ceil(Math.max(Math.abs(Math.min(...newXData)), Math.abs(Math.max(...newXData))));
    yRange = Math.ceil(Math.max(Math.abs(Math.min(...newYData)), Math.abs(Math.max(...newYData))));

    trace1 = {
        mode: 'lines',
        type: 'scatter',
        x: newXData,
        y: newYData,
    };

    trace2 = {
        mode: 'markers',
        type: 'scatter',
        x: [xDataAnime[i-1]],
        y: [yDataAnime[i-1]]
    };

    let data = [trace1, trace2];

    Plotly.animate(flight, {
        data: data,
        layout: {
            xaxis: {range: [-xRange, xRange]},
            yaxis: {range: [-yRange, yRange]}
        }
    }, {
        transition: {
            duration: Params.frameRate*0.8,
            easing: 'linear-in-out'
        }, frame: {duration: Params.frameRate,
        redraw: false}
    });
};

function pDFToData(xScaleValue, yData, stepNumber) {
    yAverageData = [];
    for (let i=0; i<yData.length-1; i++) {
        yAverageData.push((yData[i]+yData[i+1])/2)
    };

    let probabilityIncrements = [];
    for (let i=0; i<yAverageData.length; i++) {
        probabilityIncrements.push(yAverageData[i]*xScaleValue)
    };

    let probabilitySteps = [0];
    for (let i=1; i<=yAverageData.length; i++) {
        probabilitySteps.push(probabilityIncrements.slice(0, i).reduce(function(accumulator, currentValue) {
            return accumulator + currentValue;
        }));
    };

    let r = [];
    for (i = 0; i < stepNumber; i++) {
        r.push(Math.random())
    };

    let incrementData = [];
    for (i = 0; i < r.length; i++) {
        for (let j=0; j<probabilitySteps.length; j++) {
            if (r[i]>=probabilitySteps[j] && r[i]<probabilitySteps[j+1]) {
                incrementData.push(randomRange(j*xScaleValue, (j+1)*xScaleValue));
            };
        };
    };

    return incrementData;
};

function dataPreparation(xScaleValue, yData, stepNumber) {
    incrementData = pDFToData(xScaleValue, yData, stepNumber);

    let angleData = [];
    for (let i = 0; i < stepNumber; i++) {
        angleData.push(2 * Math.PI * Math.random())
    };

    let xIncrementData = [];
    for (let i = 0; i < stepNumber; i++) {
        xValue = incrementData[i] * Math.cos(angleData[i]);
        xIncrementData.push(xValue);
    };

    let yIncrementData = [];
    for (let i = 0; i < stepNumber; i++) {
        yValue = incrementData[i] * Math.sin(angleData[i]);
        yIncrementData.push(yValue);
    };

    let xDataAnime = [0];
    for (let i = 0; i < stepNumber; i++) {
        newXValue = xDataAnime[xDataAnime.length - 1] + xIncrementData[i];
        xDataAnime.push(newXValue);
    };

    let yDataAnime = [0];
    for (let i = 0; i < stepNumber; i++) {
        newYValue = yDataAnime[yDataAnime.length - 1] + yIncrementData[i];
        yDataAnime.push(newYValue);
    };

    let xRange = Math.ceil(Math.max(Math.abs(Math.min(...xDataAnime)), Math.abs(Math.max(...xDataAnime))));

    let yRange = Math.ceil(Math.max(Math.abs(Math.min(...yDataAnime)), Math.abs(Math.max(...yDataAnime))));

    return [xDataAnime, yDataAnime, xRange, yRange, incrementData];
};

function randomRange(minimum, maximum) {
    let z = (maximum - minimum) * Math.random() + minimum;
    return z;
};

function stop() {
    if (hasPushed === false) {
        alert("You haven't pushed a valid function yet!")
        return;
    } else if (typeof(animeData) === 'undefined') {
        alert("You haven't started the animation yet!")
    } else {

    Plotly.newPlot(flight, {
        data: [{
            mode: 'lines',
            type: 'scatter',
            x: [0],
            y: [0],
            name: 'path'
        },
        {
            mode: 'markers',
            type: 'scatter',
            x: [0],
            y: [0],
            marker: {size: Params.markerSize},
            name: 'pointer'
        }],
        layout: {
            xaxis: {range: [-1, 1]},
            yaxis: {range:  [-1, 1]}
        }, config: {responsive: true}}, {}, {showSendToCloud:true});

    Plotly.react(graph, {
        data: [{
            mode: 'lines',
            type: 'scatter',
            x: globalXData,
            y: globalYData,
        }],
        layout: {
            title: 'Probability Density Function of the Flight Step Width',
            xaxis: {title: {text: 'Step Width'}},
            yaxis: {title: {text: 'Probability Density'}}}
    })

    animeData = undefined;
    stepWidthData = undefined;
    initialPathButtonStatus = true;
    pathButton.innerHTML = 'hide path';
    pathButton.style.visibility = 'hidden';
    hasSkipped = false;
    xScaleSlider.disabled = false;
    pushButton.disabled = true;
}
};

function skipAnimation(animationGraph=animeData) {
    if (hasPushed === false) {
        alert("You haven't pushed a valid function yet!");
        return;
    };

    if (typeof(animationGraph) === 'undefined') {
        alert("You haven't started the animation yet!")
    };

    let xDataAnime = animationGraph[0];
    let yDataAnime = animationGraph[1];
    let xRange = animationGraph[2];
    let yRange = animationGraph[3];
    let incrementData = stepWidthData;

    Plotly.newPlot(flight, {
        data: [{
            mode: 'lines',
            type: 'scatter',
            name: 'path',
            x: xDataAnime,
            y: yDataAnime,
        }, {
            mode: 'markers',
            type: 'scatter',
            name: 'pointer',
            x: [xDataAnime[xDataAnime.length-1]],
            y: [yDataAnime[yDataAnime.length-1]],
            marker: {size: Params.markerSize}
        }], layout: {
            xaxis: {range: [-xRange, xRange]},
            yaxis: {range: [-yRange, yRange]}}, config: {responsive: true}}, {}, {showSendToCloud:true});

    Plotly.react(graph, {
        data: [{
            mode: 'lines',
            type: 'scatter',
            name: 'expected pdf',
            x: globalXData,
            y: globalYData,
        }, {
            type: 'histogram',
            histnorm: 'probability density',
            name: 'observed histogram',
            x: incrementData,
            xbins: {
                start: 0,
                end: xScale*30,
                size: xScale
            }
        }], layout: {
            title: 'Probability Density Function of the Flight Step Width',
            xaxis: {title: {text: 'Step Width'}},
            yaxis: {title: {text: 'Probability Density'}}
        }
    });

    hasSkipped = true;
    pathButton.style.visibility = 'visible';
    pathButton.innerHTML = 'hide path';
    initialPathButtonStatus = true;
};

function hidePath(animationGraph=animeData) {
    if (typeof(animationGraph) === 'undefined') {
        alert("You haven't started the animation yet!")
    };

    let xData = animationGraph[0];
    let yData = animationGraph[1];
    let xRange = animationGraph[2];
    let yRange = animationGraph[3];

    Plotly.newPlot(flight, {
        data: [{
            mode: 'markers',
            type: 'scatter',
            name: 'path',
            x: xData,
            y: yData,
            marker: {size: 3}
        }, {
            mode: 'markers',
            type: 'scatter',
            name: 'pointer',
            x: [xData[xData.length-1]],
            y: [yData[yData.length-1]],
            marker: {size: Params.markerSize}
        }], layout: {
            xaxis: {range: [-xRange, xRange]},
            yaxis: {range: [-yRange, yRange]}}, config: {responsive: true}}, {}, {showSendToCloud:true});
};

pathButton.onclick = function() {
    if (typeof(animeData) === 'undefined') {
        alert("You haven't started the animation yet!")
    } else if (hasSkipped === true) {
        if (initialPathButtonStatus === true) {
            pathButton.innerHTML = 'show path';
            hidePath(animeData);
            initialPathButtonStatus = false;
        } else {
            pathButton.innerHTML = 'hide path';
            skipAnimation(animeData);
            initialPathButtonStatus = true;
        };
    };
};